package com.collegeeventapp.dao;

import com.collegeeventapp.model.Registration;

=======
import com.collegeeventapp.dao.DBConnection;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.time.LocalDateTime;

public class RegistrationDAO {

    /**
     * Creates a new event registration record in the database.
     * @param userID The ID of the user registering.
     * @param eventID The ID of the event being registered for.
     */
    public void createRegistration(int userID, int eventID) throws SQLException {
        // registrationID is typically auto-generated by the database (Primary Key)
        String sql = "INSERT INTO Registration (userID, eventID) VALUES (?, ?)";
        try (Connection conn = DBConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            
            stmt.setInt(1, userID);
            stmt.setInt(2, eventID);
            stmt.executeUpdate();
            System.out.println("Registration created successfully for User " + userID + " to Event " + eventID);
        }
    }

    /**
     * Retrieves all registration records for a specific user.
     * @param userID The ID of the user.
     * @return A list of Registration objects.
     */
    public List<Registration> getRegistrationsByUserID(int userID) throws SQLException {
        List<Registration> registrations = new ArrayList<>();
        String sql = "SELECT registrationID, userID, eventID, registrationDate FROM Registration WHERE userID = ?";
        
        try (Connection conn = DBConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            
            stmt.setInt(1, userID);
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    java.sql.Timestamp ts = rs.getTimestamp("registrationDate");
                    java.time.LocalDateTime registeredAt = ts != null ? ts.toLocalDateTime() : null;
                    registrations.add(new Registration(
                        rs.getInt("registrationID"),
                        rs.getInt("userID"),
                        rs.getInt("eventID"),
                        registeredAt
                    ));
                }
            }
        }
        return registrations;
    }
    
    /**
     * Deletes a registration record by User and Event ID (Cancellation).
     * @param userID The ID of the user.
     * @param eventID The ID of the event.
     */
    public void deleteRegistration(int userID, int eventID) throws SQLException {
        String sql = "DELETE FROM Registration WHERE userID = ? AND eventID = ?";
        try (Connection conn = DBConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            
            stmt.setInt(1, userID);
            stmt.setInt(2, eventID);
            
            int rows = stmt.executeUpdate();
            if (rows > 0) {
                System.out.println("Registration deleted for User " + userID + " from Event " + eventID);
            } else {
                System.out.println("No matching registration found to delete.");
            }
        }
    }
}